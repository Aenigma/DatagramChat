/*
 * Copyright (C) 2014 Kevin Raoofi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.compbox.udpchat;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.util.Collections;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * In charge of the GUI, the main driver, and the glue code between the client
 * and server classes. Here be dragons.
 *
 * @author Kevin Raoofi
 */
public class UDPChatUI extends javax.swing.JFrame {

    private Timer timer;
    private final Object lock = new Object();
    private int msgSize;
    private ChatServer cs;
    private ChatClient cc;
    private final SortedSet<ChatPacket> allMsgs;
    private final ExecutorService exec;
    private InetSocketAddress listeningAddress;

    {

        allMsgs = Collections.synchronizedSortedSet(new TreeSet<>(
                (ChatPacket o1, ChatPacket o2) -> {
                    return o1.timestamp.compareTo(o2.timestamp);
                }));
    }

    /**
     * Creates new form UDPChatUI
     */
    public UDPChatUI() {
        exec = Executors.newCachedThreadPool();
        initComponents();
        initServerAndClient();
        initTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chatInput = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatLog = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        lblListenAddr = new javax.swing.JLabel();
        lblConnectedtoAddress = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemOpenConnection = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chat UI");

        chatInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatInputActionPerformed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.setEnabled(false);
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendText(evt);
            }
        });

        chatLog.setEditable(false);
        chatLog.setColumns(20);
        chatLog.setRows(5);
        jScrollPane2.setViewportView(chatLog);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(chatInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend))
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chatInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend)))
        );

        jLabel1.setText("Listening at:");

        lblListenAddr.setText("n/a");

        lblConnectedtoAddress.setText("n/a");

        jLabel2.setText("Connected to:");

        jMenu1.setText("Connect");

        menuItemOpenConnection.setText("Open connection");
        menuItemOpenConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenConnectionActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemOpenConnection);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblListenAddr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblConnectedtoAddress)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblListenAddr)
                    .addComponent(lblConnectedtoAddress)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendText(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendText
        if (!btnSend.isEnabled()) {
            return;
        }
        String msg = chatInput.getText();
        chatInput.setText("");
        exec.submit(() -> cc.sendMsg(msg));
    }//GEN-LAST:event_sendText

    private void chatInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatInputActionPerformed
        sendText(evt);
    }//GEN-LAST:event_chatInputActionPerformed

    private void menuItemOpenConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenConnectionActionPerformed
        InetSocketAddress clientAddress = new InetSocketAddress(JOptionPane
                .showInputDialog("Enter host"), Integer.parseInt(JOptionPane
                        .showInputDialog("Enter port")));

//        try {
//            this.listeningAddress = new InetSocketAddress(InetAddress
//                    .getLocalHost(), Integer.parseInt(JOptionPane
//                            .showInputDialog("Enter listening port")));
//        } catch (UnknownHostException ex) {
//            LOG.log(Level.SEVERE, "Had a problem settings client socket ", ex);
//        }
        useNewClientConnection(clientAddress);
    }//GEN-LAST:event_menuItemOpenConnectionActionPerformed

    public void useNewClientConnection(SocketAddress addr) {
        cc = new ChatClient(allMsgs, addr);
        cc.resetChannel(this.listeningAddress);
        lblConnectedtoAddress.setText(addr.toString());
        btnSend.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the windows look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UDPChatUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UDPChatUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UDPChatUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UDPChatUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UDPChatUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JTextField chatInput;
    private javax.swing.JTextArea chatLog;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblConnectedtoAddress;
    private javax.swing.JLabel lblListenAddr;
    private javax.swing.JMenuItem menuItemOpenConnection;
    // End of variables declaration//GEN-END:variables

    private void initTimer() {
        this.timer = new Timer(250, (e) -> {
            synchronized (lock) {
                if (this.msgSize != allMsgs.size()) {
                    this.msgSize = allMsgs.size();

                    chatLog.setText("");
                    for (ChatPacket s : allMsgs) {
                        chatLog.append(s.timestamp.toString() + ": "
                                + new String(s
                                        .getData()) + "\n");
                    }
                }
            }
        });
        this.timer.start();
    }

    @Override
    public void dispose() {
        super.dispose();
        exec.shutdownNow();
        if (this.timer != null) {
            this.timer.stop();
        }
    }

    private void initServerAndClient() {
        try {
            InetSocketAddress listenAddr = new InetSocketAddress(InetAddress
                    .getLocalHost(), Integer.parseInt(JOptionPane
                            .showInputDialog("Enter server port number")));
            cs = new ChatServer(allMsgs, listenAddr);
//            cs.register(ChatPacketFactory.PacketType.MESSAGE, (cp,addr) -> {
//                LOG.log(Level.INFO, "Switching client client to {0}", addr);
//                useNewClientConnection(addr);
//            });
            lblListenAddr.setText(listenAddr.toString());
//            cs = new ChatServer(allMsgs, new InetSocketAddress(1234));
            exec.submit(cs);
//            cc = new ChatClient(allMsgs,
//                    new InetSocketAddress("127.0.0.1", 1234));

        } catch (IOException ex) {
            Logger.getLogger(UDPChatUI.class.getName()).log(Level.SEVERE, null,
                    ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "You entered the wrong input. Crashing now...");
            this.dispose();
            System.exit(-1);
            LOG.log(Level.SEVERE, "Got an exception", e);
        }

    }
    private static final Logger LOG = Logger
            .getLogger(UDPChatUI.class.getName());
}
